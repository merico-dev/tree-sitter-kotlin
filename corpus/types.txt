==================
Type references
==================

something as Int
something as A

---

(source_file 
	(as_expression
		expression: (simple_identifier)
		type: (user_type identifier: (type_identifier)))
	(as_expression
		expression: (simple_identifier)
		type: (user_type identifier: (type_identifier))))

==================
Nested types
==================

something as Some.NestedType

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (user_type identifier: (type_identifier) identifier: (type_identifier))))

==================
Deeply nested types
==================

somethingElse as A.Deeply.Nested.Type

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (user_type
			identifier: (type_identifier)
			identifier: (type_identifier)
			identifier: (type_identifier)
			identifier: (type_identifier))))

==================
Generic wildcard types
==================

something as Generic<*>

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (user_type identifier: (type_identifier)
			(type_arguments (type_projection)))))

==================
Generic parameterized types
==================

something as Generic<T>
something as Generic<A, Type>

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (user_type identifier: (type_identifier)
			(type_arguments
				(type_projection
					(user_type identifier: (type_identifier))))))
	(as_expression
		expression: (simple_identifier)
		type: (user_type identifier: (type_identifier)
			(type_arguments
				(type_projection
					(user_type identifier: (type_identifier)))
				(type_projection
					(user_type identifier: (type_identifier)))))))

==================
Function types
==================

unitFunction as () -> Unit
consumer as (Int) -> Unit

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (function_type
			function_type_parameters: (function_type_parameters)
			(user_type identifier: (type_identifier))))
	(as_expression
		expression: (simple_identifier)
		type: (function_type
			function_type_parameters:
 (function_type_parameters
 parameters: (user_type identifier: (type_identifier)))
			(user_type identifier: (type_identifier)))))

==================
Function types with multiple parameters
==================

a as (Int, Generic<*>, Boolean) -> Unit
b as (Nested.Type, (Int)) -> Unit

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (function_type
			function_type_parameters: (function_type_parameters
				parameters: (user_type identifier: (type_identifier))
				parameters: (user_type identifier: (type_identifier)
					(type_arguments
						(type_projection)))
				parameters: (user_type identifier: (type_identifier)))
			(user_type identifier: (type_identifier))))
	(as_expression
		expression: (simple_identifier)
		type: (function_type
			function_type_parameters: (function_type_parameters
				parameters: (user_type identifier: (type_identifier) identifier: (type_identifier))
				parameters: (parenthesized_type type: (user_type identifier: (type_identifier))))
			    (user_type identifier: (type_identifier)))))

==================
Function types with named parameters
==================

a as (first: A, second: B) -> Unit

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (function_type
			function_type_parameters: (function_type_parameters
				parameters: (parameter
                        identifier: (simple_identifier)
                        (user_type identifier: (type_identifier)))
                parameters: (parameter
                        identifier: (simple_identifier)
                        (user_type identifier: (type_identifier))))
			(user_type identifier: (type_identifier)))))

==================
Function types with receiver
==================

a as T.() -> Unit

---

(source_file
	(as_expression
		expression: (simple_identifier)
		type: (function_type
			    identifier: (type_identifier)
			    function_type_parameters: (function_type_parameters)
			    (user_type identifier: (type_identifier)))))

